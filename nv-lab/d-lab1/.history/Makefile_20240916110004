TOPNAME = top
NXDC_FILES = constr/top.nxdc  # 约束文件路径
INC_PATH ?=  # ?=的意义是，INC_PATH如果未被定义，则为?=后的值，如果被定义过，则保持原来的值

VERILATOR = verilator
VERILATOR_CFLAGS += -MMD --build --cc -O3 \
                    --x-assign fast --x-initial fast --noassert --trace
BUILD_DIR = ./build
OBJ_DIR = $(BUILD_DIR)/obj_dir
# OBJ_DIR = ./build/obj_dir
BIN = $(BUILD_DIR)/$(TOPNAME)
# BIN = ./build/top

default: $(BIN) # 终极目标为 default，依赖 ./build/top

$(shell mkdir -p $(BUILD_DIR)) # 建立 ./build 目录

SRC_AUTO_BIND = $(abspath $(BUILD_DIR)/auto_bind.cpp) # abspath: 返回文件的绝对路径
# SRC_AUTO_BIND = ~/vtest/ex2/part4/build/auto_bind.cpp 此为约束文件
$(SRC_AUTO_BIND): $(NXDC_FILES) # 目标文件（约束文件 SRC_AUTO_BIND) 的建立依赖于 constr/top.nxdc
	python3 $(NVBOARD_HOME)/scripts/auto_pin_bind.py $^ $@
	# python3 $(NVBOARD_HOME)/scripts/auto_pin_bind.py constr/top.nxdc auto_bin.cpp 
	# 此命令用来生成 auto_bin.cpp 文件

VSRCS = $(shell find $(abspath ./vsrc) -name "*.v")
# 在 ~/vtest/ex2/part4/vsrc 目录中寻找所有的 .v 文件
# VSRCS = top.v bcd7seg.v
CSRCS = $(shell find $(abspath ./csrc) -name "*.c" -or -name "*.cc" -or -name "*.cpp")
# CSRCS = sim_main.cpp
CSRCS += $(SRC_AUTO_BIND)
# CSRCS = sim_main.cpp auto_bind.cpp

include $(NVBOARD_HOME)/scripts/nvboard.mk
# 在该 Makefile 中引用其他 Makefile

INCFLAGS = $(addprefix -I, $(INC_PATH))
# INCFLAGS = -I
CFLAGS += $(INCFLAGS) -DTOP_NAME="\"V$(TOPNAME)\""
# CFLAGS = -I -DTOP_NAME="\"Vtop\""
LDFLAGS += -lSDL2 -lSDL2_image

$(BIN): $(VSRCS) $(CSRCS) $(NVBOARD_ARCHIVE)
# ./build/top 文件的建立依赖于 top.v bcd7seg.v sim_main.cpp auto_bind.cpp 以及 verilator 仿真可执行文件
	@rm -rf $(OBJ_DIR)
	$(VERILATOR) $(VERILATOR_CFLAGS) \
	--top-module $(TOPNAME) $^ \
	$(addprefix -CFLAGS, $(CFLAGS)) $(addprefix -LDFLAGS, $(LDFLAGS)) \
	--Mdir $(OBJ_DIR) --exe -o $(abspath $(BIN))
	# verilator -MMD --build --cc -O3 --x-assign fast --x-initial fast --noassert --trace \
	# --top-module top top.v bcd7seg.v sim_main.cpp auto_bind.cpp \
	# -CFLAGS -I -DTOP_NAME="\"VTOP\"" -LDFLAGS -lSDL2 -lSDL2_image \
	# --Mdir ./build/obj_dir --exe -o ./build/top
	# --top-module top 指定顶层文件名 --Mdir 将生成的文件都放入 obj_dir 目录中 --exe -o ./build/top 产生可执行文件并指定名字为 ./build/top

all: default

run: $(BIN)
	@echo "Running $(BIN)..."
	@$^
	# make run 执行可执行文件 ./build/top

clean:
	rm -rf $(BUILD_DIR)

.PHONY: default all clean run
